<html xmlns="http://www.w3.org/1999/xhtml" xmlns:composite="http://java.sun.com/jsf/composite"
        xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
        xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:p="http://xmlns.jcp.org/jsf/passthrough">

    <!-- Ein Dropdownmenü innerhalb Formularen. -->

    <composite:interface preferred="false" shortDescription="DEPRECATED This module is deprecated and will be removed in a future release. It is recommended to use isy-angular-widgets instead.">

        <!-- Die Referenz des Objekts. -->
        <composite:attribute name="reference" required="true" />
        <!-- Der Wert der Auswahl für das Databinding -->
        <composite:attribute name="value" required="true" />
        <!-- Ob die Eingabe eine Pflichteingabe ist. -->
        <composite:attribute name="required" type="Boolean" default="false" />
        <!-- dieses Attribut wird im Sinne von bootstrap-selectlist.js interpretiert, d.h. gibt die Anzahl der Zeilen die sichtbar sind -->
        <composite:attribute name="size" />
        <!-- Ob die Liste deaktiviert ist. -->
        <composite:attribute name="disabled" type="Boolean" default="false" />
        <!-- Der Text für das Label -->
        <composite:attribute name="label" type="String" required="false" />
        <!-- Die CSS-Klasse für das Label. -->
        <composite:attribute name="labelStyleClass" type="String" default="col-lg-6" />
        <!-- Die CSS-Klasse für den Eingabebereich. -->
        <composite:attribute name="inputStyleClass" type="String" default="col-lg-6" />
        <!-- Ein spezifisches Validation-Model, falls benötigt. -->
        <composite:attribute name="validationModel" required="false" default="#{validationModel}" />
        <!-- Eine spezifsche globale Konfiguration, falls benötigt. -->
        <composite:attribute name="globalConfig" required="false" default="#{globalConfigurationModel}" />

    </composite:interface>

    <composite:implementation>

        <!-- Validierungsfehler bestimmen -->
        <ui:param name="validationMessages"
                value="#{cc.attrs.validationModel.getValidationMessagesForReference(cc.attrs.reference)}" />
        <ui:param name="existsValidationError" value="#{not empty validationMessages}" />

        <div class="form-group#{existsValidationError ? ' has-error has-feedback': ''}">

            <label class="control-label#{cc.attrs.required ? ' mandatory' : ''} #{cc.attrs.labelStyleClass}"
                    for="#{cc.clientId}:#{jsfHelper.escapeIdentifier(cc.attrs.reference)}">
                <h:outputText value="#{cc.attrs.label}" />
            </label>

            <div class="#{cc.attrs.inputStyleClass}">
                <div class="form-browsecollect #{cc.attrs.globalConfig.jsEnabled ? 'browsecollect' : ''}">
                    <h:selectManyListbox id="#{jsfHelper.escapeIdentifier(cc.attrs.reference)}" value="#{cc.attrs.value}" p:data-size="#{cc.attrs.size}"
                            styleClass="row-vertical-center-align form-browsecollect #{cc.attrs.globalConfig.jsEnabled ? 'browsecollect' : 'browsecollect-native'} #{cc.attrs.disabled ? 'disabled' : ''}">
                        <f:attribute name="disabled" value="#{cc.attrs.disabled}" />
                        <composite:insertChildren />
                    </h:selectManyListbox>
                </div>
            </div>

            <!-- Bei Validierungsfehlern -->
            <ui:fragment rendered="#{existsValidationError and cc.attrs.globalConfig.jsEnabled}">
                <span class="form-control-feedback without-input-group-addon">
                    <a data-delay="100" data-trigger="hover" data-title="" data-placement="top"
                            data-content="#{cc.attrs.validationModel.getCombinedValidationMessageForReference(cc.attrs.reference)}"
                            data-toggle="tooltip" class="btn btn-link rf-popover" data-original-title="" title="">
                        <span class="icon icon-info"></span>
                    </a>
                </span>
            </ui:fragment>

        </div>
    </composite:implementation>

</html>
