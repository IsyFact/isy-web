<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:composite="http://java.sun.com/jsf/composite"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://xmlns.jcp.org/jsf/passthrough" >

<!-- A dropdown menu within forms. -->

<composite:interface preferred="false" shortDescription="DEPRECATED This module is deprecated and will be removed in a future release. It is recommended to use isy-angular-widgets instead.">

    <!-- The reference of the object. -->
    <composite:attribute name="reference" required="true"/>
    <!-- The value of the selection for databinding -->
    <composite:attribute name="value" required="true"/>
    <!-- Whether the selection is invalid or not. -->
    <composite:attribute name="invalid" type="Boolean" default="false"/>

    <!-- Allows to set a special ID to make the component accessible e.g. for JavaScript or tests. This is entered in the data-isy-custom-id attribute. -->
    <composite:attribute name="customId" type="String" required="false"/>

    <!-- Whether the rendering should be readonly -->
    <composite:attribute name="readonly" type="Boolean" required="false"
                         default="false"/>
    <!-- Whether the list is disabled. -->
    <composite:attribute name="disabled" type="Boolean" default="false" />

    <!-- Events must be explicitly declared -->
    <composite:attribute name="valueChangeListener" required="false"
                         targets="#{jsfHelper.escapeIdentifier(cc.attrs.reference)}"/>
    <!-- clientBehavior: change-->
    <composite:clientBehavior name="change" event="change"
                              targets="#{jsfHelper.escapeIdentifier(cc.attrs.reference)}"/>

    <!-- Konverter-Bean for the displayed elements -->
    <composite:attribute name="converter"/>

    <!-- Parameters for the converter -->
    <composite:attribute name="converterAttribute"/>

    <!-- Form-specific -->
    <!-- Whether the input is a required input. -->
    <composite:attribute name="required" type="Boolean" default="false" />
    <!-- The text for the label -->
    <composite:attribute name="label" type="String" required="false"/>
    <!-- The CSS class for the label. -->
    <composite:attribute name="labelStyleClass" type="String"
                         default="col-lg-6"/>
    <!-- The CSS class for the input area. -->
    <composite:attribute name="inputStyleClass" type="String"
                         default="col-lg-6"/>
    <!-- The CSS class 'dropdownStyleClass'. -->
    <composite:attribute name="dropdownStyleClass" type="String"
                         default="form-selectonedropdown"/>
    <!-- For the current print view display from the basisModel. -->
    <composite:attribute name="showPrintView" type="Boolean"
                         default="#{not empty basisModel and basisModel.showPrintView}"/>

    <!-- A specific validation model, if needed. -->
    <composite:attribute name="validationModel" required="false"
                         default="#{validationModel}"/>
    <!-- A specific global configuration, if needed. -->
    <composite:attribute name="globalConfig" required="false"
                         default="#{globalConfigurationModel}"/>
</composite:interface>

<composite:implementation>

    <!-- Determine validation errors -->
    <ui:param name="validationMessages"
              value="#{cc.attrs.validationModel.getValidationMessagesForReference(cc.attrs.reference)}"/>
    <ui:param name="existsValidationError"
              value="#{not empty validationMessages}"/>

    <div class="form-group#{existsValidationError ? ' has-error has-feedback': ''}"
         data-isy-custom-id="#{cc.attrs.customId}">

        <label class="control-label#{cc.attrs.required ? ' mandatory' : ''} #{cc.attrs.labelStyleClass}"
               for="#{cc.clientId}:isySelectOneDropdown:#{jsfHelper.escapeIdentifier(cc.attrs.reference)}">
            <h:outputText value="#{cc.attrs.label}"/>
        </label>

        <!-- Normal rendering: Render dropdown widget. -->
        <ui:fragment rendered="#{not cc.attrs.readonly}">
            <div class="#{cc.attrs.inputStyleClass}">
                <div class="#{cc.attrs.dropdownStyleClass} #{cc.attrs.globalConfig.jsEnabled and not basisModel.showPrintView ? 'dropdown' : ''}">
                    <h:selectOneMenu id="#{jsfHelper.escapeIdentifier(cc.attrs.reference)}"
                                     value="#{cc.attrs.value}"
                                     styleClass="#{cc.attrs.dropdownStyleClass} #{cc.attrs.globalConfig.jsEnabled and not basisModel.showPrintView ? 'selectpicker' : 'selectpicker-native'} #{cc.attrs.invalid ? 'invalid' : ''} #{cc.attrs.readonly ? 'disabled readonly' : ''}"
                                     p:data-style="btn-icon"
                                     converter="#{cc.attrs.converter}" disabled="#{cc.attrs.disabled}"
                                     title="#{cc.attrs.label}">
                        <composite:insertChildren/>
                        <f:attribute name="converterAttribute" value="#{cc.attrs.converterAttribute}"/>
                    </h:selectOneMenu>
                </div>
            </div>
        </ui:fragment>

        <!-- For readonly, render the dropdown value as a label. -->
        <ui:fragment rendered="#{cc.attrs.readonly and not empty cc.attrs.value}">
            <div class="#{cc.attrs.inputStyleClass}">
                <h:outputText value="#{cc.attrs.value}"
                              styleClass="formselectonedropdownlabel #{cc.attrs.textStyleClass}"
                              style="#{empty cc.attrs.textStyleClass ? 'line-height: inherit;' : ''}"
                              title="#{cc.attrs.tooltip}"/>
            </div>
        </ui:fragment>

        <!-- In case of validation errors -->
        <ui:fragment rendered="#{existsValidationError and cc.attrs.globalConfig.jsEnabled}">
                <span class="form-control-feedback without-input-group-addon">
                    <a data-delay="100" data-trigger="hover" data-title="" data-placement="top"
                       data-content="#{cc.attrs.validationModel.getCombinedValidationMessageForReference(cc.attrs.reference)}"
                       data-toggle="tooltip" class="btn btn-link rf-popover" data-original-title="" title="">
                        <span class="icon icon-info"/>
                    </a>
                </span>
        </ui:fragment>
    </div>
</composite:implementation>

</html>
