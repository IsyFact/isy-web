<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:composite="http://java.sun.com/jsf/composite"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://xmlns.jcp.org/jsf/passthrough">

<!-- Ein Dropdownmenü. Wird entweder über das Bootstrap Select Plugin dargestellt oder über ein natives Dropdown. -->

<composite:interface preferred="false" shortDescription="DEPRECATED This module is deprecated and will be removed in a future release. It is recommended to use isy-angular-widgets instead.">

    <!-- Die Referenz des Objekts. -->
    <composite:attribute name="reference" required="true"/>
    <!-- Der Wert der id. -->
    <composite:attribute name="referenceId" required="false" type="String"
                         default="#{jsfHelper.escapeIdentifier(cc.attrs.reference)}"/>
    <!-- Der Wert der Auswahl für das Databinding -->
    <composite:attribute name="value" required="true"/>
    <!-- Ob die Auswahl invalide ist oder nicht. -->
    <composite:attribute name="invalid" type="Boolean" default="false"/>
    <!-- Ob die Auswahl deaktiviert ist oder nicht. -->
    <composite:attribute name="disabled" type="Boolean" default="false"/>
    <!-- Das Tooltip über dem SelectOneDropdown. -->
    <composite:attribute name="title" type="String" required="false"/>

    <!-- Eine spezifische globale Konfiguration, falls notwendig. -->
    <composite:attribute name="globalConfig" required="false"
                         default="#{globalConfigurationModel}"/>

    <!-- Die CSS-Klasse für das Dropdownmenü. -->
    <composite:attribute name="dropdownStyleClass" type="String"
                         required="false"/>

    <!-- Ob die Darstellung nur lesend erfolgen soll -->
    <composite:attribute name="readonly" type="Boolean" required="false"
                         default="false"/>

    <!-- Ob die Darstellung deaktiviert sein soll -->
    <composite:attribute name="disabled" type="Boolean" required="false"
                         default="false"/>

    <!-- Konverter-Bean für die angezeigten Elemente -->
    <composite:attribute name="converter"/>

    <!-- Parameter für den Konverter -->
    <composite:attribute name="converterAttribute"/>

    <!-- Erlaubt, eine spezielle ID zu setzen, um die Komponente z.B. für JavaScript oder Tests zugreifbar zu machen. Diese wird im Attribut data-isy-custom-id eingetragen. -->
    <composite:attribute name="customId" required="false"/>

    <composite:clientBehavior name="change" event="change"
                              targets="#{jsfHelper.escapeIdentifier(cc.attrs.referenceId)}"/>
    <composite:attribute name="valueChangeListener" required="false"
                         targets="#{jsfHelper.escapeIdentifier(cc.attrs.referenceId)}"/>
</composite:interface>

<composite:implementation>
    <!-- Das Attribut cc.attrs.valueChangeListener ist z.Zt. nicht implementiert -->

    <!-- Normale Darstellung: Dropdownwidget rendern. -->
    <ui:fragment rendered="#{not cc.attrs.readonly}">
        <div class="#{cc.attrs.dropdownStyleClass} #{cc.attrs.globalConfig.jsEnabled and not basisModel.showPrintView ? 'dropdown' : ''}"
             data-isy-custom-id="#{cc.attrs.customId}">
            <h:selectOneMenu id="#{jsfHelper.escapeIdentifier(cc.attrs.referenceId)}"
                             value="#{cc.attrs.value}"
                             styleClass="#{cc.attrs.dropdownStyleClass} #{cc.attrs.globalConfig.jsEnabled and not basisModel.showPrintView ? 'selectpicker' : 'selectpicker-native'} #{cc.attrs.invalid ? 'invalid' : ''} #{cc.attrs.readonly ? 'disabled readonly' : ''}"
                             p:data-style="btn-icon"
                             converter="#{cc.attrs.converter}" disabled="#{cc.attrs.disabled}"
                             title="#{cc.attrs.title}">
                <composite:insertChildren/>
                <f:attribute name="converterAttribute"
                             value="#{cc.attrs.converterAttribute}"/>
            </h:selectOneMenu>
        </div>
    </ui:fragment>

    <!-- Bei readonly den Dropdownwert als Label rendern. -->
    <ui:fragment rendered="#{cc.attrs.readonly and not empty cc.attrs.fourEyesLastValue}">
        <div class="#{cc.attrs.inputStyleClass}">
            <div class="col-lg-11" style="padding-top:4px">
                <h:outputText
                        value="#{cc.attrs.fourEyesLastValue}"
                        styleClass="formcontrol readonly #{cc.attrs.textStyleClass}"
                        style="#{empty cc.attrs.textStyleClass ? 'line-height: inherit;' : ''  } "
                        title="#{cc.attrs.tooltip}"/>
            </div>
            <div class="col-lg-1" style="color:#{fourEyesColor}; padding-top:4px">
                <span class="icon fa-unlock"/>
            </div>
        </div>
    </ui:fragment>

</composite:implementation>

</html>
